/*对于处理数组的C++函数，必须将数据种类，数组的起始位置和元素数目传递给函数
传统做法：将指向数组起始处的指针作为一个参数，将数组长度作为第二个参数
第二种做法：指定元素区间，可以通过传递两个指针来完成，第一个指针标识数组的开头，第二个指针标识数组的
尾部。在STL标准库中，其将区间方法广义化，使用超尾的概念来指定区间，对于数组来说，标识数组结尾的参数是
指向最后一个元素后面的指针。
例如：double eloud[20];//指针eloud和eloud+20定义了区间，eloud指向第一个元素，eloud+19指向最后一个元素
即eloud[19]，eloud+20则指向数组结尾后面的位置
将区间传递给函数的作用是告诉函数应处理哪些元素*/

/*示例（使用两个指针规定区间）*/
#include<iostream>
using namespace std;
const int arsize = 8;
int sum_arr(const int* begin, const int* end);/*两个参数是常量指针，这种指针的指向可以更改，但是指针
                                              指向的值不能更改*/
/*补充：const修饰指针有两种形式，分别称为指针常量和常量指针
指针常量：int * const p=&a; 这种修饰方式被称为指针常量，特点：指针的指向无法修改，指针所指向的值可以修改
          const离p近，则p无法修改，例如p=&a就是非法操作
常量指针：const int *p=&a; 这种修饰方式称为常量指针，特点：指针的指向可以修改；指针所指向的值不能修改
          const离*p近，则*p无法修改(注意，这种声明方式并不代表它指向的值实际上就是一个常量，只不过对于
          指针来说，这个值是常量，但实际上不是常量)*/
/*const变量的地址无法赋给常规指针，因为一旦将地址赋给常规指针，则意味着可以通过指针修改变量的值，但可以
使用强制类型转换来突破这种限制，例如const_cast*/
int main() {
    int cookies[arsize] = { 1,2,4,8,16,32,64,128 };
    int sum = sum_arr(cookies, cookies + arsize);/*第一个参数是数组名，函数将数组名解释为指向首个元素的
                                                 指针，并将指针作为参数传递给函数，，第二个参数是对指
                                                 针进行加减操作，指针加8，意味着指针指向最后一个元素*/
    cout << "总共有" << sum << "块曲奇饼被吃掉" << endl;
    sum = sum_arr(cookies, cookies + 3);/*让函数计算数组前三个元素的总和*/
    cout << "前三个吃货吃了" << sum << "个曲奇饼\n";
    sum = sum_arr(cookies + 4, cookies + 8);/*让函数计算数组第四个元素和第八个元素之间所有元素之和，也就是后
                                    四个元素*/
    cout << "最后四个吃货吃了" << sum << "个曲奇饼" << endl;
    return 0;
}   
int sum_arr(const int*begin,const int *end) /* *begin和*end相当于形式参数，接受cookies和cookies+arsize
                                            这两个分别指向首要元素的指针和指向最后一个元素的指针*/ {
    const int* pt;/*声明常量指针，这个指针将在区间依次向后变动*/
    int total=0;

    for (pt = begin; pt != end; pt++)/*利用循环让指针在区间之内变动*/
        total = total + *pt;/*计算pt指针指向的所有元素之和*/
    return total;
}
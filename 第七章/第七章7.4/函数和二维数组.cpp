#include<iostream>
using namespace std;
int sum(int (*ar2)[4],int size);/*(*ar2)必须用括号括起来，如果写为int *ar2[4]则表示声明一个由四个指向int
								的指针组成的数组，而不是一个指向四个由int值组成的数组的指针，另外一个原因
								是函数参数不能是数组，参数只能传递数组的地址，就是指针*/
//传递二维数组地址的函数原型有两种写法：
//1、返回值数据类型 函数名(指针类型 (*指针名)[二维数组的一维元素值],int 读取的元素数)  int sum(int (*ps)[4],int size)
//2、返回值数据类型 函数名(指针类型 数组名[][二维数组的一维元素值]，int 读取的元素数)  int sum(int ar2[][4],int size)
/*上述两个原型都指出，ar2是指针不是数组，指针类型指出它指向由四个int组成的数组。因此，指针类型指定了列
数，所以一般来说二维数组的一维元素数写在调用函数中的第二个参数中，二维数组的二维元素数写在函数原型的指针
类型说明中，指针的类型就指出了这个指针指向由几个元素数组成的数组（这个数组指的是二维数组里面包含的数组）
所以没有将列数（二维数组的二维元素数）作为独立的函数参数的原因就在这儿*/
/*因为指针类型指定了列数，因此sum()函数只能接受由4列组成的数组，但长度变量指定了行数*/
int main()
{
	int data[3][4] = { {1,2,3,4}, {9,8,7,6}, {2,4,6,8} };
	int total = sum(data, 3);/*将二维数组的行数作为参数的原因：data是指向由四个int值组成的数组的指针*/


	return 0;
}
int sum(int(*ar2)[4], int size) {

}
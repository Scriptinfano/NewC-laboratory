#include<iostream>
using namespace std;
inline double square(double x) { return x * x; }
int main()
{
    /*内联函数的意义：提高程序运行速度
    内联函数和常规函数的区别：C++编译器将它们组合到程序中的方式*/

    /*编译的最终产品是可执行程序，由一组机器语言指令组成，每条指令有对应的地址。*/

    /*执行函数代码的细节：
    执行函数调用指令时，程序将在函数调用后存储该指令的内存地址，将函数参数复制到
    堆栈，跳到标记函数起点的内存单元，执行函数代码，如果有返回值，则将返回值放到
    寄存器中，然后跳回地址被保存的指令处。来回跳跃并记录跳跃位置意味着运行速度减
    慢*/

    /*内联函数的特点：
    内联函数的编译代码和其他程序代码内联了起来，编译器将使用相应的函数代码替换函数
    调用。对于内联代码，程序不需要跳到另一个位置处执行代码再跳回来，内联函数的运行
    速度比常规函数稍快，代价是占用更多内存。如果程序在10个不同的地方调用同一个内联
    函数，则该程序将包含该函数代码的10个副本*/

    /*执行函数代码时间比处理函数调用机制的时间长：节省的时间占很小一部分
      执行代码时间短：内联函数调用可以节省非内联调用使用的大部分时间，由于过程很快
      尽管节省了该过程的大部分时间，但节省的时间的绝对值并不大，除非该函数经常被调用*/

      /*由以上分析可得：内联函数适合于执行时间短又多次被重复调用的函数使用*/

      /*使用内联函数的语法：
      1、在函数声明前加上关键字inline
      2、在函数定义前加上关键字inline
      例如：inline typename function(typename 变量名){函数代码}

      通常省略原型，将整个定义放在本应提供原型的地方*/

      /*请求将函数作为内联函数时，编译器不一定会满足这种要求，可能认为函数过大或函数发生了
      递归现象（注意：内联函数不能递归）*/

    double a, b = 0.0;
    double c = 13.0;

    a = square(5.0);
    b = square(4.5 + 7.5);
    cout << "a=" << a << ",b=" << b << "\n";
    cout << "c=" << c << ",c的平方=" << square(c++) << "\n";
    cout << "经过加1操作之后，c=" << c;

    /*由上面的示例程序可知：
    内联函数与常规函数相同，是按值传递参数的，参数是表达式时，函数也可以计算表达式的值后
    传递表达式的值*/

    /*内联函数是C++特有的，但内联这种方法在C语言中被称为宏，下面是一个计算平方的宏：
    #define SQUARE(x) x*x
    这不是通过传递参数实现的，而是通过文本替换来实现的，x是参数的符号标记，例如下面的例子：
    a=SQUARE(5.0);被替换为a=5.0*5.0;
    b=SQUARE(4.5+7.5);被替换为b=4.5+7.5*4.5+7.5 在这种情况下会造成严重的错误，文本替换导致执行时先执行了乘法运算 */
    /*宏不能按值传递*/


    return 0;
}
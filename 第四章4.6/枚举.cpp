#include <iostream>;
using namespace std;
int main()
{
	/*C++的enum工具提供了另一种创建符号常量的方式，可以代替const，还允许定义新类型*/
	/*使用enum的句法和使用结构相似*/
	enum spectrum { red, orange, yellow, green, blue, violet, indigo, ultraviolet };//使spectrum成为新类型的名称，其被称为枚举,类似于struct变量被称为结构
	/*注意：定义枚举量时，不要在枚举类型之后加等号*/
																			//2、将red,orange,yellow等作为符号常量，对应
																			   //数值0到7，这些常量叫做枚举量
																			//3、enum是工具名，用来定义枚举
/*默认情况下，将整数值赋给枚举量，第一个枚举量的值为0，第二个枚举量的值为1，以此类推
也可以通过显示地指定整数值来覆盖默认值*/
	spectrum band;/*创建一个名为band，类型为spectrum型枚举的变量*/
	band = blue;/*合法，blue是枚举量，在默认的枚举定义中是4，所以这句话的意思是将4赋给枚举变量band*/
	/*band = 2000;  非法声明，在给枚举变量赋值时，不能直接将数字赋给变量，只能使用定义枚举时的枚举量所代表的值来为枚举
					变量赋值，因此spectrum变量受到限制，只有8个可能的值*/
					/*枚举只定义了赋值运算符，C++并没有为枚举定义算术运算*/
					/*++band; 和band=orange+red;都是非法声明*/
	int color = orange;/*合法，枚举量作为整形，可以被提升为int类型，int类型不能自动转换为枚举类型*/
	color = 3 + red;/*合法，color是int型,red在此处被自动转换为int型*/
	/*在算数表达式中，等号右边变量所代表的值会被自动转回为int型的值*/
	/*band = orange + red; 非法。算术表达式中，等号右边的值是int型，int型的值不能赋给spectrum的变量band*/
	band = spectrum(3);/*在没有给值进行强制类型转换的情况下，只能将前面定义当中的枚举量赋给枚举变量，如果想要将其他值赋
					   给枚举变量，则必须对该值进行强制类型转换，比如这行代码中将3用强制类型转换为spectrum型枚举量，格式为： 要转换为的枚举类型名(要转换的值);
					   将3强制类型转换为spectrum型后，就可以赋给变量band了*/

					   /*枚举是有取值范围的，在定义枚举或者强制将其他类型的值转换为枚举型的值时，要注意枚举的取值范围，取值范围将在之后
					   讨论*/
					   /*枚举一般用来定义符号常量，相当于const，但const的限定更加宽松，spectrum的限定更加严格
					   可以用枚举来定义switch语句中的符号常量（之后讨论）*/
	enum { red, orange, yellow, green, blue, violet, indigo, ultraviolet };/*如果只打算使用常量，而不创建枚举类型，可以
																		   直接省略枚举类型的名称*/

	enum bits { one = 1, two = 2, four = 4, eight = 8 };/*自定义枚举量的值，自定义的值必须是整数*/
	enum bigstep { first, second = 100, third };/*first在默认情况下是0，后面没有被初始化的枚举量将比前面的枚举量大一，所以
												third的值为101*/
	enum { zero, null = 0, one, numero_uno = 1 };/*可以创建多个值相同的枚举量*/


	/*枚举在最初的定义中，只有声明中指出的值是有效的，但在C++有了强制类型转换后，增加了可以赋给枚举变量的合法值
	枚举有了一定的取值范围，注意枚举值一定是整数，因此在范围之内不包括小数*/
	enum bits { one = 1, teo = 2, four = 4, eight = 8 };
	bits myflag;
	myflag = bits(6);/*合法，即使6不是枚举值，但是已经通过强制类型转换将6转换为枚举值了，且6在枚举的取值范围之内*/
	/*取值范围并不是系统定义的，而是根据你在枚举定义中按照一定计算方法算出来的
	定义如下：枚举量的上限=比枚举量的最大值（在枚举定义中找）大的2的幂的最小值减1
	举例：在定义bits时，其定义中的最大枚举量为8，在2的幂中，比8大的值的最小值就是16，16是2的幂且比8大，则取值范围的上限
	就是16-1，即15
			  枚举量的下限：需要知道枚举量的最小值，如果该最小值不小于0，则取值范围的下限为0；否则采用与寻找上限方式相同
			  的方式寻找下限
	举例：如果定义的枚举量的最小值为-6，而比它小的最大的2的幂是-8（加上负号），因此下限为-7*/
	/*C++11新增了作用域内枚举，将在以后讨论*/
	return 0;
}